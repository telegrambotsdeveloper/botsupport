import os
import logging
from typing import Dict, Set, Optional

import telegram
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# -------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ / env
# -------------------
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")  # –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
_admin_env = os.environ.get("ADMIN_ID", "")
try:
    ADMIN_ID: int = int(_admin_env) if _admin_env else 0
except ValueError:
    ADMIN_ID = 0

if not TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# -------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -------------------
logging.basicConfig(level=logging.INFO,
                    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# -------------------
# –í –ø–∞–º—è—Ç–∏
# -------------------
# mapping: admin_message_id -> user_id (–¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞ reply)
forward_map: Dict[int, int] = {}
# –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª inline-–∫–Ω–æ–ø–∫—É, —Å–ª–µ–¥—É—é—â–µ–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–æ–º–µ—á–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
user_waiting_for_next: Set[int] = set()

# -------------------
# –ö–æ–º–∞–Ω–¥—ã
# -------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [
        [InlineKeyboardButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="contact_support")],
    ]
    await update.message.reply_text(
        "ü§ñ *Betsense AI Support Bot*\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(kb),
    )

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞ (–µ—Å–ª–∏ ADMIN_ID –Ω–µ –∑–∞–¥–∞–Ω —á–µ—Ä–µ–∑ env)
async def register_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global ADMIN_ID
    user = update.effective_user
    if ADMIN_ID and ADMIN_ID != user.id:
        await update.message.reply_text("–ê–¥–º–∏–Ω —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (ADMIN_ID –∑–∞–¥–∞–Ω –≤ env).")
        return
    ADMIN_ID = user.id
    await update.message.reply_text(f"–ì–æ—Ç–æ–≤–æ ‚Äî –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω. –í–∞—à ID: {ADMIN_ID}")
    logger.info("Admin registered: %s (%s)", user.username, ADMIN_ID)

# -------------------
# Callback (inline button)
# -------------------
async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if query.data == "contact_support":
        user_waiting_for_next.add(user_id)
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        await query.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. (–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.)")

# -------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–µ—Ä–µ—Å–ª–∞—Ç—å/—Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –∏ –∑–∞–ø–æ–º–Ω–∏—Ç—å mapping
# -------------------
async def forward_to_admin(msg: telegram.Message, context: ContextTypes.DEFAULT_TYPE) -> Optional[int]:
    """
    –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å forward; –µ—Å–ª–∏ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç ‚Äî –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å copy_message; –≤–µ—Ä–Ω—É—Ç—å message_id —Å–æ–æ–±—â–µ–Ω–∏—è —É –∞–¥–º–∏–Ω–∞ (–∏–ª–∏ None).
    """
    try:
        forwarded = await msg.forward(chat_id=ADMIN_ID)
        admin_msg_id = forwarded.message_id
        logger.info("forwarded msg_id %s -> admin_msg_id %s", msg.message_id, admin_msg_id)
        return admin_msg_id
    except telegram.error.BadRequest as e:
        logger.warning("Forward failed (%s). Trying copy_message...", e)
        try:
            copied = await context.bot.copy_message(
                chat_id=ADMIN_ID,
                from_chat_id=msg.chat.id,
                message_id=msg.message_id
            )
            admin_msg_id = copied.message_id
            logger.info("copied msg_id %s -> admin_msg_id %s", msg.message_id, admin_msg_id)
            return admin_msg_id
        except Exception as e2:
            logger.exception("Copy failed: %s", e2)
            # fallback: –æ—Ç–ø—Ä–∞–≤–∏–º –∞–¥–º–∏–Ω—É —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username = msg.from_user.username or f"{msg.from_user.first_name or ''} {msg.from_user.last_name or ''}"
            text = f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username} (ID: {msg.from_user.id}):\n\n"
            if msg.text:
                text += msg.text
            else:
                text += "[–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞/—Ñ–∞–π–ª]"
            try:
                sent = await context.bot.send_message(chat_id=ADMIN_ID, text=text)
                return sent.message_id
            except Exception:
                logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å fallback –∞–¥–º–∏–Ω—É.")
                return None
    except Exception:
        logger.exception("Unexpected error while forwarding")
        return None

# -------------------
# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
# -------------------
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg:
        return

    sender_id = msg.from_user.id

    # --- –ê–¥–º–∏–Ω—Å–∫–∏–π –ø–æ—Ç–æ–∫: –æ—Ç–≤–µ—Ç—ã –∞–¥–º–∏–Ω—É –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (Reply) –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /reply
    if sender_id == ADMIN_ID:
        # 1) –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (Reply) -> –∏—Å–ø–æ–ª—å–∑—É–µ–º mapping
        if msg.reply_to_message:
            replied_admin_id = msg.reply_to_message.message_id
            target_user = forward_map.get(replied_admin_id)
            if target_user:
                await send_admin_reply_to_user(msg, target_user, context)
                return
            # –≤–æ–∑–º–æ–∂–Ω–æ –∞–¥–º–∏–Ω –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ ID-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ -> –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å ID –∏–∑ —Ç–µ–∫—Å—Ç–∞
            # fallthrough -> –ø—Ä–æ–≤–µ—Ä–∫–∞ /reply –Ω–∏–∂–µ
        # 2) /reply user_id —Ç–µ–∫—Å—Ç
        if msg.text and msg.text.startswith("/reply"):
            parts = msg.text.split(" ", 2)
            if len(parts) < 3:
                await msg.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reply USER_ID —Ç–µ–∫—Å—Ç_–æ—Ç–≤–µ—Ç–∞")
                return
            try:
                target = int(parts[1])
                text = parts[2]
                await context.bot.send_message(chat_id=target, text=f"üì¢ –û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Betsense AI:\n\n{text}")
                await msg.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            except Exception as e:
                logger.exception("–û—à–∏–±–∫–∞ /reply: %s", e)
                await msg.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å ID.")
            return

        # –ù–µ–º–Ω–æ–≥–æ –ø–æ–º–æ—â–∏ –∞–¥–º–∏–Ω—É
        await msg.reply_text("‚ÑπÔ∏è –û—Ç–≤–µ—Ç—å—Ç–µ *–Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –µ–º—É. "
                             "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reply USER_ID —Ç–µ–∫—Å—Ç", parse_mode="Markdown")
        return

    # --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–æ—Ç–æ–∫: –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª inline –∫–Ω–æ–ø–∫—É ‚Äî –ø–æ–º–µ—Ç–∏–º –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–æ –∑–¥–µ—Å—å –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–≥–¥–∞)
    try:
        admin_msg_id = await forward_to_admin(msg, context)
        if admin_msg_id:
            forward_map[admin_msg_id] = sender_id
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–º –∞–¥–º–∏–Ω—É –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á—Ç–æ–±—ã –±—ã–ª–æ –≤–∏–¥–Ω–æ –ø—Ä—è–º–æ —Ç–µ–∫—Å—Ç–æ–º)
    try:
        await context.bot.send_message(chat_id=ADMIN_ID, text=f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {sender_id}")
    except Exception:
        logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ID –∞–¥–º–∏–Ω—É (–≤–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω-–∞–∫–∫–∞—É–Ω—Ç—É)")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await msg.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É Betsense AI. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–∫—É")

    # –°–Ω—è—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
    user_waiting_for_next.discard(sender_id)


# -------------------
# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç—ã/–≥–æ–ª–æ—Å/–≤–∏–¥–µ–æ/—Å—Ç–∏–∫–µ—Ä)
# -------------------
async def send_admin_reply_to_user(admin_msg: telegram.Message, user_id: int, context: ContextTypes.DEFAULT_TYPE):
    try:
        if admin_msg.text:
            await context.bot.send_message(chat_id=user_id, text=f"üì¢ –û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Betsense AI:\n\n{admin_msg.text}")
            await admin_msg.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            return

        # –º–µ–¥–∏–∞-–æ–±—Ä–∞–±–æ—Ç–∫–∞
        if admin_msg.photo:
            await context.bot.send_photo(chat_id=user_id, photo=admin_msg.photo[-1].file_id, caption=admin_msg.caption or "")
        elif admin_msg.document:
            await context.bot.send_document(chat_id=user_id, document=admin_msg.document.file_id, caption=admin_msg.caption or "")
        elif admin_msg.voice:
            await context.bot.send_voice(chat_id=user_id, voice=admin_msg.voice.file_id, caption=admin_msg.caption or "")
        elif admin_msg.video:
            await context.bot.send_video(chat_id=user_id, video=admin_msg.video.file_id, caption=admin_msg.caption or "")
        elif admin_msg.sticker:
            await context.bot.send_sticker(chat_id=user_id, sticker=admin_msg.sticker.file_id)
        elif admin_msg.animation:
            await context.bot.send_animation(chat_id=user_id, animation=admin_msg.animation.file_id, caption=admin_msg.caption or "")
        else:
            # –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–ª–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é (forward)
            await admin_msg.forward(chat_id=user_id)

        await admin_msg.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except telegram.error.BadRequest as e:
        logger.exception("BadRequest –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: %s", e)
        await admin_msg.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.")
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        await admin_msg.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞.")

# -------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
# -------------------
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.exception("Update caused error: %s", context.error)

# -------------------
# –ó–∞–ø—É—Å–∫
# -------------------
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("register_admin", register_admin))
    app.add_handler(CallbackQueryHandler(callback_handler))
    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, message_handler))

    app.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (run_polling). ADMIN_ID=%s", ADMIN_ID or "<not set>")
    app.run_polling()

if __name__ == "__main__":
    main()
