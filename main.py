import os
import logging
from threading import Thread
from typing import Dict, Set, Optional

from flask import Flask
import telegram
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# -------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ / env
# -------------------
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")  # –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
_admin_env = os.environ.get("ADMIN_ID", "")
try:
    ADMIN_ID: int = int(_admin_env) if _admin_env else 0
except ValueError:
    ADMIN_ID = 0

if not TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# -------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -------------------
logging.basicConfig(level=logging.INFO,
                    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# -------------------
# –í –ø–∞–º—è—Ç–∏
# -------------------
forward_map: Dict[int, int] = {}
user_waiting_for_next: Set[int] = set()

# -------------------
# Flask –¥–ª—è Render
# -------------------
flask_app = Flask(__name__)

@flask_app.route("/")
def index():
    return "Bot is running!"

def run_flask():
    port = int(os.environ.get("PORT", 10000))  # Render –∑–∞–¥–∞—ë—Ç PORT –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    flask_app.run(host="0.0.0.0", port=port)

# -------------------
# Telegram Handlers
# -------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [[InlineKeyboardButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="contact_support")]]
    await update.message.reply_text(
        "ü§ñ *Betsense AI Support Bot*\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(kb),
    )

async def register_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global ADMIN_ID
    user = update.effective_user
    if ADMIN_ID and ADMIN_ID != user.id:
        await update.message.reply_text("–ê–¥–º–∏–Ω —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (ADMIN_ID –∑–∞–¥–∞–Ω –≤ env).")
        return
    ADMIN_ID = user.id
    await update.message.reply_text(f"–ì–æ—Ç–æ–≤–æ ‚Äî –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω. –í–∞—à ID: {ADMIN_ID}")
    logger.info("Admin registered: %s (%s)", user.username, ADMIN_ID)

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if query.data == "contact_support":
        user_waiting_for_next.add(user_id)
        await query.message.reply_text(
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. (–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.)"
        )

# -------------------
# –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω—É
# -------------------
async def forward_to_admin(msg: telegram.Message, context: ContextTypes.DEFAULT_TYPE) -> Optional[int]:
    try:
        forwarded = await msg.forward(chat_id=ADMIN_ID)
        admin_msg_id = forwarded.message_id
        forward_map[admin_msg_id] = msg.from_user.id
        return admin_msg_id
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É")
        return None

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg:
        return

    sender_id = msg.from_user.id

    # --- –ê–¥–º–∏–Ω—Å–∫–∏–π –ø–æ—Ç–æ–∫ ---
    if sender_id == ADMIN_ID:
        # Reply –∏–ª–∏ /reply
        if msg.reply_to_message:
            replied_admin_id = msg.reply_to_message.message_id
            target_user = forward_map.get(replied_admin_id)
            if target_user:
                await context.bot.send_message(chat_id=target_user, text=msg.text or "–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞")
                await msg.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
                return
        if msg.text and msg.text.startswith("/reply"):
            parts = msg.text.split(" ", 2)
            if len(parts) >= 3:
                target = int(parts[1])
                text = parts[2]
                await context.bot.send_message(chat_id=target, text=f"üì¢ –û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Betsense AI:\n\n{text}")
                await msg.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            return
        return

    # --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–æ—Ç–æ–∫ ---
    await forward_to_admin(msg, context)
    await msg.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É Betsense AI. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    user_waiting_for_next.discard(sender_id)

# -------------------
# –û—à–∏–±–∫–∏
# -------------------
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.exception("Update caused error: %s", context.error)

# -------------------
# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
# -------------------
def run_bot():
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("register_admin", register_admin))
    application.add_handler(CallbackQueryHandler(callback_handler))
    application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, message_handler))
    application.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (run_polling). ADMIN_ID=%s", ADMIN_ID or "<not set>")
    application.run_polling()

if __name__ == "__main__":
    # Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã Render –≤–∏–¥–µ–ª –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç
    Thread(target=run_flask).start()
    # –ë–æ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    run_bot()
